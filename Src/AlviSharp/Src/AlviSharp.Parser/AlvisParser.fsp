%{   
open AlvisSpec  
%}   
 
%token <string> ID   
%token <int> INT   
%token <float> FLOAT   


%token PORT IN OUT 
%token PROC NULL LOOP EXIT SELECT ALT  IF ELSE

%token EOF   
%token BRACESOPEN BRACESCLOSE PARENTHESEOPEN PARENTHESECLOSE COMMA DOUBLECOLON SEMICOLON COMMENT
%token EQ LT LE GT GE NE
%token AGENT 
%type <AlvisSpec.Agents> start   

// start   
%start start   

 
%%   
 

op: EQ { Eq } | LT { Lt } | LE { Le } | GT { Gt } | GE { Ge }  | NE {Ne}



start:  alvisAgentsList EOF {$1}


    
agentBody:
    | valueList portList  loopClause conditionList   procList  exitClause nextLine      { {Null = false; Values = $1; Ports = $2;  Looping = $3; Condition = $4; Proc=$5}}
    | NULL  exitClause nextLine                                                    { {Null = true;  Values = []; Ports = [];  Looping = None; Condition  = []; Proc=[]}}

selectClause:
    | SELECT BRACESOPEN altList BRACESCLOSE {{Alt = $3}}


altClause:
    | ALT PARENTHESEOPEN guardClause PARENTHESECLOSE  BRACESOPEN conditionBody BRACESCLOSE  {{Guard=$3; ConditionBody=$6; ElseConditionBody=None}}

procClause:
    | PROC ID BRACESOPEN conditionBody BRACESCLOSE  {{Condition = None; Port= $2; ProcBody=$4}}
    | PROC PARENTHESEOPEN guardClause PARENTHESECLOSE ID BRACESOPEN conditionBody BRACESCLOSE  {{Condition = Some($3); Port= $5; ProcBody=$7}}


conditionClause:
    | conditionIfElseClause {$1}


conditionIfElseClause:
    | conditionIfClause {$1}

conditionIfClause:
    | IF PARENTHESEOPEN guardClause PARENTHESECLOSE  BRACESOPEN conditionBody BRACESCLOSE  {{Guard=$3; ConditionBody=$6; ElseConditionBody=None}}
    | IF PARENTHESEOPEN guardClause PARENTHESECLOSE  BRACESOPEN conditionBody BRACESCLOSE ELSE BRACESOPEN conditionBody BRACESCLOSE{{Guard=$3; ConditionBody=$6; ElseConditionBody=Some($10)}}


conditionBody:
    | portList  loopClause conditionList  assignList nullClause exitClause      { { Ports = $1;  Looping = $2; Condition = $3; Assign=$4;  Null=$5;  Exit= $6}}



loopClause:
    | {None}
    | LOOP {None}
    | LOOP BRACESOPEN BRACESCLOSE {None}
    | LOOP BRACESOPEN loopBody BRACESCLOSE {Some($3)}

loopBody:
    | {{Exit = false; Ports=[] ; Select=[]; Condition=[]}}
    | EXIT nextLine {{Exit= true; Ports=[]; Select=[]; Condition=[]}}
    | portList selectList conditionList {{Exit=false; Ports = $1 ; Select=$2; Condition=$3}}







    //Simple Clause

alvisStatement:
    | AGENT agentList BRACESOPEN agentBody BRACESCLOSE { {AgentList =  $2; AgentBody = $4}}  


guardClause:
    | {Const(true)}
    | value EQ EQ value {Cond($1,Eq, $4)}
    | value op value { Cond($1,$2,$3)}

portClause:
    | IN  ID   nextLine { In($2, None)}
    | OUT  ID  nextLine { Out($2, None)}
    | IN  ID value  nextLine { In($2, Some($3))}
    | OUT  ID value  nextLine { Out($2, Some($3))}

nextLine:
    |   {}
    | SEMICOLON {}
    | SEMICOLON COMMENT {}

valueClause:
    | ID DOUBLECOLON valueType nextLine { {Name = $1; Value = $3 }}

valueType:   
    | ID EQ  value                              { $3 }   


value:   
    | INT                   { Int($1) }   
    | FLOAT                 { Float($1) }   
    | ID                    { String($1) }   


assignClause:
    | ID EQ value nextLine {{Name=$1; Value=$3}}

nullClause:
     | {false}
     | NULL nextLine {true}

exitClause:
     | {false}
     | EXIT nextLine {true}



    // Lists

alvisAgentsList:
    | alvisStatement {[$1]}
    | alvisStatement alvisAgentsList {$1 :: $2}


agentList:   
    | ID                    { [$1]}   
    | ID COMMA agentList  { $1 :: $3 }    

assignList:
    | {[]}
    | assignClause {[$1]}
    | assignClause assignList {$1 :: $2}

portList:
    |       { [] }   
    | portClause  {[$1]}
    | portClause portList    {$1 :: $2}

valueList:
    |   {[]}
    | valueClause nextLine {[$1]}
    | valueClause valueList { $1::$2 }

procList:
    | {[]}
    | procClause {[$1]}
    | procClause procList { $1 :: $2 }

selectList:
    | {[]}
    | selectClause {[$1]}
    | selectClause selectList { $1 :: $2 }

altList:
    | altClause {[$1]}
    | altClause altList {$1 :: $2}

conditionList:
    | {[]}
    | conditionClause {[$1]}
    | conditionClause conditionList { $1 :: $2 }


%%

