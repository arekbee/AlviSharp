// Implementation file for parser generated by fsyacc
module AlvisParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "AlvisParser.fsp"
   
open AlvisSpec  

# 10 "AlvisParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | AGENT
  | EQ
  | LT
  | LE
  | GT
  | GE
  | NE
  | BRACESOPEN
  | BRACESCLOSE
  | PARENTHESEOPEN
  | PARENTHESECLOSE
  | COMMA
  | DOUBLECOLON
  | SEMICOLON
  | COMMENT
  | EOF
  | PROC
  | NULL
  | LOOP
  | EXIT
  | SELECT
  | IF
  | ELSE
  | PORT
  | IN
  | OUT
  | BOOL of (bool)
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_AGENT
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_NE
    | TOKEN_BRACESOPEN
    | TOKEN_BRACESCLOSE
    | TOKEN_PARENTHESEOPEN
    | TOKEN_PARENTHESECLOSE
    | TOKEN_COMMA
    | TOKEN_DOUBLECOLON
    | TOKEN_SEMICOLON
    | TOKEN_COMMENT
    | TOKEN_EOF
    | TOKEN_PROC
    | TOKEN_NULL
    | TOKEN_LOOP
    | TOKEN_EXIT
    | TOKEN_SELECT
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_PORT
    | TOKEN_IN
    | TOKEN_OUT
    | TOKEN_BOOL
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_alvisStatements
    | NONTERM_alvisStatement
    | NONTERM_agentBody
    | NONTERM_procList
    | NONTERM_procClause
    | NONTERM_conditionClause
    | NONTERM_conditionIfElseClause
    | NONTERM_conditionIfClause
    | NONTERM_guardClause
    | NONTERM_conditionBody
    | NONTERM_loopClause
    | NONTERM_loopBody
    | NONTERM_valueList
    | NONTERM_valueClause
    | NONTERM_valueType
    | NONTERM_value
    | NONTERM_op
    | NONTERM_agentList
    | NONTERM_nextLine
    | NONTERM_portList
    | NONTERM_portClause

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | AGENT  -> 0 
  | EQ  -> 1 
  | LT  -> 2 
  | LE  -> 3 
  | GT  -> 4 
  | GE  -> 5 
  | NE  -> 6 
  | BRACESOPEN  -> 7 
  | BRACESCLOSE  -> 8 
  | PARENTHESEOPEN  -> 9 
  | PARENTHESECLOSE  -> 10 
  | COMMA  -> 11 
  | DOUBLECOLON  -> 12 
  | SEMICOLON  -> 13 
  | COMMENT  -> 14 
  | EOF  -> 15 
  | PROC  -> 16 
  | NULL  -> 17 
  | LOOP  -> 18 
  | EXIT  -> 19 
  | SELECT  -> 20 
  | IF  -> 21 
  | ELSE  -> 22 
  | PORT  -> 23 
  | IN  -> 24 
  | OUT  -> 25 
  | BOOL _ -> 26 
  | FLOAT _ -> 27 
  | INT _ -> 28 
  | ID _ -> 29 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_AGENT 
  | 1 -> TOKEN_EQ 
  | 2 -> TOKEN_LT 
  | 3 -> TOKEN_LE 
  | 4 -> TOKEN_GT 
  | 5 -> TOKEN_GE 
  | 6 -> TOKEN_NE 
  | 7 -> TOKEN_BRACESOPEN 
  | 8 -> TOKEN_BRACESCLOSE 
  | 9 -> TOKEN_PARENTHESEOPEN 
  | 10 -> TOKEN_PARENTHESECLOSE 
  | 11 -> TOKEN_COMMA 
  | 12 -> TOKEN_DOUBLECOLON 
  | 13 -> TOKEN_SEMICOLON 
  | 14 -> TOKEN_COMMENT 
  | 15 -> TOKEN_EOF 
  | 16 -> TOKEN_PROC 
  | 17 -> TOKEN_NULL 
  | 18 -> TOKEN_LOOP 
  | 19 -> TOKEN_EXIT 
  | 20 -> TOKEN_SELECT 
  | 21 -> TOKEN_IF 
  | 22 -> TOKEN_ELSE 
  | 23 -> TOKEN_PORT 
  | 24 -> TOKEN_IN 
  | 25 -> TOKEN_OUT 
  | 26 -> TOKEN_BOOL 
  | 27 -> TOKEN_FLOAT 
  | 28 -> TOKEN_INT 
  | 29 -> TOKEN_ID 
  | 32 -> TOKEN_end_of_input
  | 30 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_alvisStatements 
    | 3 -> NONTERM_alvisStatements 
    | 4 -> NONTERM_alvisStatement 
    | 5 -> NONTERM_agentBody 
    | 6 -> NONTERM_agentBody 
    | 7 -> NONTERM_procList 
    | 8 -> NONTERM_procList 
    | 9 -> NONTERM_procList 
    | 10 -> NONTERM_procClause 
    | 11 -> NONTERM_procClause 
    | 12 -> NONTERM_conditionClause 
    | 13 -> NONTERM_conditionClause 
    | 14 -> NONTERM_conditionClause 
    | 15 -> NONTERM_conditionIfElseClause 
    | 16 -> NONTERM_conditionIfClause 
    | 17 -> NONTERM_conditionIfClause 
    | 18 -> NONTERM_guardClause 
    | 19 -> NONTERM_guardClause 
    | 20 -> NONTERM_conditionBody 
    | 21 -> NONTERM_loopClause 
    | 22 -> NONTERM_loopClause 
    | 23 -> NONTERM_loopClause 
    | 24 -> NONTERM_loopClause 
    | 25 -> NONTERM_loopBody 
    | 26 -> NONTERM_loopBody 
    | 27 -> NONTERM_loopBody 
    | 28 -> NONTERM_valueList 
    | 29 -> NONTERM_valueList 
    | 30 -> NONTERM_valueList 
    | 31 -> NONTERM_valueClause 
    | 32 -> NONTERM_valueType 
    | 33 -> NONTERM_value 
    | 34 -> NONTERM_value 
    | 35 -> NONTERM_value 
    | 36 -> NONTERM_value 
    | 37 -> NONTERM_op 
    | 38 -> NONTERM_op 
    | 39 -> NONTERM_op 
    | 40 -> NONTERM_op 
    | 41 -> NONTERM_op 
    | 42 -> NONTERM_op 
    | 43 -> NONTERM_agentList 
    | 44 -> NONTERM_agentList 
    | 45 -> NONTERM_nextLine 
    | 46 -> NONTERM_nextLine 
    | 47 -> NONTERM_nextLine 
    | 48 -> NONTERM_portList 
    | 49 -> NONTERM_portList 
    | 50 -> NONTERM_portList 
    | 51 -> NONTERM_portClause 
    | 52 -> NONTERM_portClause 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 32 
let _fsyacc_tagOfErrorTerminal = 30

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | AGENT  -> "AGENT" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | NE  -> "NE" 
  | BRACESOPEN  -> "BRACESOPEN" 
  | BRACESCLOSE  -> "BRACESCLOSE" 
  | PARENTHESEOPEN  -> "PARENTHESEOPEN" 
  | PARENTHESECLOSE  -> "PARENTHESECLOSE" 
  | COMMA  -> "COMMA" 
  | DOUBLECOLON  -> "DOUBLECOLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMENT  -> "COMMENT" 
  | EOF  -> "EOF" 
  | PROC  -> "PROC" 
  | NULL  -> "NULL" 
  | LOOP  -> "LOOP" 
  | EXIT  -> "EXIT" 
  | SELECT  -> "SELECT" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | PORT  -> "PORT" 
  | IN  -> "IN" 
  | OUT  -> "OUT" 
  | BOOL _ -> "BOOL" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | AGENT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | BRACESOPEN  -> (null : System.Object) 
  | BRACESCLOSE  -> (null : System.Object) 
  | PARENTHESEOPEN  -> (null : System.Object) 
  | PARENTHESECLOSE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | DOUBLECOLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMENT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | PROC  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | LOOP  -> (null : System.Object) 
  | EXIT  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | PORT  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | OUT  -> (null : System.Object) 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 1us; 65535us; 8us; 9us; 2us; 65535us; 14us; 15us; 17us; 18us; 2us; 65535us; 14us; 17us; 17us; 17us; 3us; 65535us; 13us; 14us; 31us; 32us; 49us; 50us; 3us; 65535us; 13us; 31us; 31us; 31us; 49us; 31us; 3us; 65535us; 13us; 33us; 31us; 33us; 49us; 33us; 2us; 65535us; 20us; 21us; 35us; 36us; 4us; 65535us; 24us; 25us; 28us; 29us; 38us; 39us; 42us; 43us; 2us; 65535us; 12us; 13us; 48us; 49us; 1us; 65535us; 52us; 54us; 1us; 65535us; 8us; 11us; 2us; 65535us; 8us; 59us; 60us; 61us; 1us; 65535us; 63us; 64us; 4us; 65535us; 20us; 45us; 35us; 45us; 46us; 47us; 66us; 67us; 1us; 65535us; 45us; 46us; 1us; 65535us; 6us; 7us; 4us; 65535us; 11us; 60us; 56us; 57us; 83us; 84us; 85us; 86us; 6us; 65535us; 11us; 12us; 24us; 48us; 28us; 48us; 38us; 48us; 42us; 48us; 52us; 58us; 9us; 65535us; 11us; 83us; 12us; 85us; 24us; 83us; 28us; 83us; 38us; 83us; 42us; 83us; 48us; 85us; 52us; 83us; 58us; 85us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 11us; 14us; 17us; 21us; 25us; 29us; 32us; 37us; 40us; 42us; 44us; 47us; 49us; 54us; 56us; 58us; 63us; 70us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 3us; 1us; 4us; 2us; 4us; 44us; 1us; 4us; 1us; 4us; 1us; 4us; 2us; 5us; 30us; 2us; 5us; 50us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 2us; 8us; 9us; 1us; 9us; 2us; 10us; 11us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 2us; 13us; 14us; 1us; 14us; 1us; 15us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 2us; 16us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 19us; 1us; 19us; 1us; 19us; 2us; 20us; 50us; 1us; 20us; 1us; 20us; 3us; 22us; 23us; 24us; 2us; 23us; 24us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 26us; 1us; 26us; 2us; 27us; 50us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 2us; 46us; 47us; 1us; 47us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 18us; 20us; 22us; 24us; 27us; 30us; 32us; 34us; 36us; 38us; 41us; 43us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 71us; 73us; 75us; 78us; 81us; 84us; 87us; 90us; 93us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 113us; 115us; 117us; 121us; 124us; 126us; 128us; 130us; 132us; 134us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; |]
let _fsyacc_action_rows = 91
let _fsyacc_actionTableElements = [|1us; 32768us; 0us; 6us; 0us; 49152us; 1us; 32768us; 15us; 3us; 0us; 16385us; 1us; 16386us; 0us; 6us; 0us; 16387us; 1us; 32768us; 29us; 78us; 2us; 32768us; 7us; 8us; 11us; 79us; 2us; 16412us; 17us; 16us; 29us; 62us; 1us; 32768us; 8us; 10us; 0us; 16388us; 7us; 16429us; 8us; 16432us; 13us; 81us; 16us; 16432us; 18us; 16432us; 21us; 16432us; 24us; 87us; 25us; 89us; 3us; 16405us; 18us; 51us; 24us; 87us; 25us; 89us; 1us; 16396us; 21us; 34us; 1us; 16391us; 16us; 19us; 0us; 16389us; 0us; 16390us; 1us; 16391us; 16us; 19us; 0us; 16393us; 2us; 32768us; 9us; 20us; 29us; 27us; 4us; 16402us; 26us; 71us; 27us; 69us; 28us; 68us; 29us; 70us; 1us; 32768us; 10us; 22us; 1us; 32768us; 29us; 23us; 1us; 32768us; 7us; 24us; 2us; 16432us; 24us; 87us; 25us; 89us; 1us; 32768us; 8us; 26us; 0us; 16394us; 1us; 32768us; 7us; 28us; 2us; 16432us; 24us; 87us; 25us; 89us; 1us; 32768us; 8us; 30us; 0us; 16395us; 1us; 16396us; 21us; 34us; 0us; 16398us; 0us; 16399us; 1us; 32768us; 9us; 35us; 4us; 16402us; 26us; 71us; 27us; 69us; 28us; 68us; 29us; 70us; 1us; 32768us; 10us; 37us; 1us; 32768us; 7us; 38us; 2us; 16432us; 24us; 87us; 25us; 89us; 1us; 32768us; 8us; 40us; 1us; 16400us; 22us; 41us; 1us; 32768us; 7us; 42us; 2us; 16432us; 24us; 87us; 25us; 89us; 1us; 32768us; 8us; 44us; 0us; 16401us; 6us; 32768us; 1us; 72us; 2us; 73us; 3us; 74us; 4us; 75us; 5us; 76us; 6us; 77us; 4us; 32768us; 26us; 71us; 27us; 69us; 28us; 68us; 29us; 70us; 0us; 16403us; 3us; 16405us; 18us; 51us; 24us; 87us; 25us; 89us; 1us; 16396us; 21us; 34us; 0us; 16404us; 1us; 16406us; 7us; 52us; 4us; 16409us; 8us; 53us; 19us; 56us; 24us; 87us; 25us; 89us; 0us; 16407us; 1us; 32768us; 8us; 55us; 0us; 16408us; 1us; 16429us; 13us; 81us; 0us; 16410us; 2us; 16411us; 24us; 87us; 25us; 89us; 0us; 16413us; 1us; 32768us; 29us; 62us; 0us; 16414us; 1us; 32768us; 12us; 63us; 1us; 32768us; 29us; 65us; 0us; 16415us; 1us; 32768us; 1us; 66us; 4us; 32768us; 26us; 71us; 27us; 69us; 28us; 68us; 29us; 70us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 1us; 32768us; 29us; 80us; 0us; 16428us; 1us; 16430us; 14us; 82us; 0us; 16431us; 1us; 16429us; 13us; 81us; 0us; 16433us; 1us; 16429us; 13us; 81us; 0us; 16434us; 1us; 32768us; 29us; 88us; 0us; 16435us; 1us; 32768us; 29us; 90us; 0us; 16436us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 9us; 11us; 14us; 17us; 19us; 20us; 28us; 32us; 34us; 36us; 37us; 38us; 40us; 41us; 44us; 49us; 51us; 53us; 55us; 58us; 60us; 61us; 63us; 66us; 68us; 69us; 71us; 72us; 73us; 75us; 80us; 82us; 84us; 87us; 89us; 91us; 93us; 96us; 98us; 99us; 106us; 111us; 112us; 116us; 118us; 119us; 121us; 126us; 127us; 129us; 130us; 132us; 133us; 136us; 137us; 139us; 140us; 142us; 144us; 145us; 147us; 152us; 153us; 154us; 155us; 156us; 157us; 158us; 159us; 160us; 161us; 162us; 163us; 164us; 166us; 167us; 169us; 170us; 172us; 173us; 175us; 176us; 178us; 179us; 181us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 2us; 5us; 5us; 1us; 0us; 1us; 2us; 8us; 5us; 0us; 1us; 2us; 1us; 7us; 11us; 0us; 3us; 3us; 0us; 1us; 3us; 4us; 0us; 2us; 1us; 0us; 1us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 0us; 1us; 2us; 0us; 2us; 3us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 14us; 15us; 16us; 17us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 21us; 21us; 21us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 16389us; 16390us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 65535us; 16395us; 65535us; 16398us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 16407us; 65535us; 16408us; 65535us; 16410us; 65535us; 16413us; 65535us; 16414us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 16422us; 16423us; 16424us; 16425us; 16426us; 16427us; 65535us; 16428us; 65535us; 16431us; 65535us; 16433us; 65535us; 16434us; 65535us; 16435us; 65535us; 16436us; |]
let _fsyacc_reductions ()  =    [| 
# 313 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AlvisSpec.Agents)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 322 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'alvisStatements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "AlvisParser.fsp"
                                                  _1
                   )
# 27 "AlvisParser.fsp"
                 : AlvisSpec.Agents));
# 333 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'alvisStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "AlvisParser.fsp"
                                           [_1]
                   )
# 30 "AlvisParser.fsp"
                 : 'alvisStatements));
# 344 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'alvisStatement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'alvisStatements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "AlvisParser.fsp"
                                                           _1 :: _2
                   )
# 31 "AlvisParser.fsp"
                 : 'alvisStatements));
# 356 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'agentList)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'agentBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "AlvisParser.fsp"
                                                                              {AgentList =  _2; AgentBody = _4}
                   )
# 34 "AlvisParser.fsp"
                 : 'alvisStatement));
# 368 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'portList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'loopClause)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionClause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'procList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "AlvisParser.fsp"
                                                                                              {Null = false; Values = _1; Ports = _2;  Looping = _3; Condition = _4; Proc=_5}
                   )
# 38 "AlvisParser.fsp"
                 : 'agentBody));
# 383 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "AlvisParser.fsp"
                                                                                       {Null = true;  Values = []; Ports = [];  Looping = None; Condition  = []; Proc=[]}
                   )
# 39 "AlvisParser.fsp"
                 : 'agentBody));
# 393 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "AlvisParser.fsp"
                            []
                   )
# 43 "AlvisParser.fsp"
                 : 'procList));
# 403 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'procClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "AlvisParser.fsp"
                                       [_1]
                   )
# 44 "AlvisParser.fsp"
                 : 'procList));
# 414 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'procClause)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'procList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "AlvisParser.fsp"
                                                _1 :: _2
                   )
# 45 "AlvisParser.fsp"
                 : 'procList));
# 426 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'guardClause)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "AlvisParser.fsp"
                                                                                                                    {Condition = Some(_3); Port=_5; ProcBody=_7}
                   )
# 49 "AlvisParser.fsp"
                 : 'procClause));
# 439 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "AlvisParser.fsp"
                                                                                                                    {Condition = None    ;   Port=_2; ProcBody=_4}
                   )
# 50 "AlvisParser.fsp"
                 : 'procClause));
# 451 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "AlvisParser.fsp"
                            []
                   )
# 54 "AlvisParser.fsp"
                 : 'conditionClause));
# 461 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionIfElseClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "AlvisParser.fsp"
                                                  [_1]
                   )
# 55 "AlvisParser.fsp"
                 : 'conditionClause));
# 472 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionIfElseClause)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "AlvisParser.fsp"
                                                                     _1 :: _2 
                   )
# 56 "AlvisParser.fsp"
                 : 'conditionClause));
# 484 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionIfClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "AlvisParser.fsp"
                                              _1
                   )
# 60 "AlvisParser.fsp"
                 : 'conditionIfElseClause));
# 495 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'guardClause)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "AlvisParser.fsp"
                                                                                                                 {Guard=_3; ConditionBody=_6; ElseConditionBody=None}
                   )
# 63 "AlvisParser.fsp"
                 : 'conditionIfClause));
# 507 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'guardClause)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionBody)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "AlvisParser.fsp"
                                                                                                                                                           {Guard=_3; ConditionBody=_6; ElseConditionBody=Some(_10)}
                   )
# 64 "AlvisParser.fsp"
                 : 'conditionIfClause));
# 520 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "AlvisParser.fsp"
                            Const(true)
                   )
# 67 "AlvisParser.fsp"
                 : 'guardClause));
# 530 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "AlvisParser.fsp"
                                            Cond(_1,_2,_3)
                   )
# 68 "AlvisParser.fsp"
                 : 'guardClause));
# 543 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'portList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'loopClause)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "AlvisParser.fsp"
                                                                             { Ports = _1;  Looping = _2; Condition = _3}
                   )
# 71 "AlvisParser.fsp"
                 : 'conditionBody));
# 556 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "AlvisParser.fsp"
                            None
                   )
# 75 "AlvisParser.fsp"
                 : 'loopClause));
# 566 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "AlvisParser.fsp"
                                 None
                   )
# 76 "AlvisParser.fsp"
                 : 'loopClause));
# 576 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "AlvisParser.fsp"
                                                        None
                   )
# 77 "AlvisParser.fsp"
                 : 'loopClause));
# 586 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'loopBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "AlvisParser.fsp"
                                                                 Some(_3)
                   )
# 78 "AlvisParser.fsp"
                 : 'loopClause));
# 597 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "AlvisParser.fsp"
                            {Exit = false; Ports=[] }
                   )
# 81 "AlvisParser.fsp"
                 : 'loopBody));
# 607 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'nextLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "AlvisParser.fsp"
                                          {Exit= true; Ports=[]}
                   )
# 82 "AlvisParser.fsp"
                 : 'loopBody));
# 618 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'portList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "AlvisParser.fsp"
                                     {Exit=false; Ports = _1 }
                   )
# 83 "AlvisParser.fsp"
                 : 'loopBody));
# 629 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "AlvisParser.fsp"
                              []
                   )
# 86 "AlvisParser.fsp"
                 : 'valueList));
# 639 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "AlvisParser.fsp"
                                        [_1]
                   )
# 87 "AlvisParser.fsp"
                 : 'valueList));
# 650 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'nextLine)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "AlvisParser.fsp"
                                                             _3::_1 
                   )
# 88 "AlvisParser.fsp"
                 : 'valueList));
# 663 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "AlvisParser.fsp"
                                                      {Name = _1; Value = _3 }
                   )
# 92 "AlvisParser.fsp"
                 : 'valueClause));
# 675 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "AlvisParser.fsp"
                                                                      _3 
                   )
# 95 "AlvisParser.fsp"
                 : 'valueType));
# 687 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "AlvisParser.fsp"
                                                   Int(_1) 
                   )
# 99 "AlvisParser.fsp"
                 : 'value));
# 698 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "AlvisParser.fsp"
                                                   Float(_1) 
                   )
# 100 "AlvisParser.fsp"
                 : 'value));
# 709 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "AlvisParser.fsp"
                                                   String(_1) 
                   )
# 101 "AlvisParser.fsp"
                 : 'value));
# 720 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "AlvisParser.fsp"
                                       Bool(_1)
                   )
# 102 "AlvisParser.fsp"
                 : 'value));
# 731 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "AlvisParser.fsp"
                              Eq 
                   )
# 106 "AlvisParser.fsp"
                 : 'op));
# 741 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "AlvisParser.fsp"
                                          Lt 
                   )
# 106 "AlvisParser.fsp"
                 : 'op));
# 751 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "AlvisParser.fsp"
                                                      Le 
                   )
# 106 "AlvisParser.fsp"
                 : 'op));
# 761 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "AlvisParser.fsp"
                                                                  Gt 
                   )
# 106 "AlvisParser.fsp"
                 : 'op));
# 771 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "AlvisParser.fsp"
                                                                              Ge 
                   )
# 106 "AlvisParser.fsp"
                 : 'op));
# 781 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "AlvisParser.fsp"
                                                                                          Ne
                   )
# 106 "AlvisParser.fsp"
                 : 'op));
# 791 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "AlvisParser.fsp"
                                                   [_1]
                   )
# 109 "AlvisParser.fsp"
                 : 'agentList));
# 802 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'agentList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "AlvisParser.fsp"
                                                 _3 :: _1 
                   )
# 110 "AlvisParser.fsp"
                 : 'agentList));
# 814 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "AlvisParser.fsp"
                              
                   )
# 113 "AlvisParser.fsp"
                 : 'nextLine));
# 824 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "AlvisParser.fsp"
                                      
                   )
# 114 "AlvisParser.fsp"
                 : 'nextLine));
# 834 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "AlvisParser.fsp"
                                              
                   )
# 115 "AlvisParser.fsp"
                 : 'nextLine));
# 844 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "AlvisParser.fsp"
                                   [] 
                   )
# 118 "AlvisParser.fsp"
                 : 'portList));
# 854 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'portClause)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'nextLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "AlvisParser.fsp"
                                                [_1]
                   )
# 119 "AlvisParser.fsp"
                 : 'portList));
# 866 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'portList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'portClause)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'nextLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "AlvisParser.fsp"
                                                            _2 :: _1
                   )
# 120 "AlvisParser.fsp"
                 : 'portList));
# 879 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "AlvisParser.fsp"
                                       In(_2)
                   )
# 123 "AlvisParser.fsp"
                 : 'portClause));
# 890 "AlvisParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "AlvisParser.fsp"
                                       Out(_2)
                   )
# 124 "AlvisParser.fsp"
                 : 'portClause));
|]
# 902 "AlvisParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 33;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : AlvisSpec.Agents =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
