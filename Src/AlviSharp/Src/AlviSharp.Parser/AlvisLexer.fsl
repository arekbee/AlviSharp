{   
module AlvisLexer
open System   
open AlvisParser   
open Microsoft.FSharp.Text.Lexing
 
let keywords =    
    [   
        "agent", AGENT;    
        "proc", PROC;    
        "null", NULL;  
        "in", IN;
        "out", OUT; 
        "loop", LOOP;
        "exit", EXIT;
        "if", IF; 
        "else", ELSE;
        "select", SELECT;
        "alt", ALT;
    ] |> Map.ofList     
 
let ops =   
    [   
        "=",    EQ;  
        "<",    LT;  
        "<=",   LE;   
        ">",    GT;    
        ">=",   GE;    
        "/=",   NE;    
    ] |> Map.ofList 
}   
 
let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']   
let int         = '-'?digit+   
let float       = '-'?digit+ '.' digit+   
let identifier  = char(char|digit|['-' '_' '.'])*   
let whitespace  = [' ' '\t']   
let newline     = "\n\r" | '\n' | '\r' | "\r\n" 
let operator    = ">" | ">=" | "<" | "<=" | "=" | "/="  
 
rule tokenize = parse   
| whitespace    { tokenize lexbuf }   
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }   
| int           { INT(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }   
| float         { FLOAT(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }   
| operator      { ops.[LexBuffer<_>.LexemeString lexbuf] }   
| identifier    { match keywords.TryFind(LexBuffer<_>.LexemeString lexbuf) with   
                  | Some(token) -> token   
                  | None -> ID(LexBuffer<_>.LexemeString lexbuf) }   
| ','           { COMMA }  
| '{'			{ BRACESOPEN }
| '}'			{ BRACESCLOSE }
 
| '('			{ PARENTHESEOPEN }
| ')'			{ PARENTHESECLOSE }

| "::"			{ DOUBLECOLON }
| ';'			{ SEMICOLON }
| "--"			{ COMMENT }
| eof           { EOF }
